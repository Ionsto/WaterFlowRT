#version 430
struct Block{
	vec4 Colour;
	float WaterContent;
	float Solid;
	float Entity;
//	bool Solid;
//	bool Entity;
};
struct EntityPrimitive{
	vec4 Colour;
	vec4 Position;
	vec4 Size;
};
struct Node{
	bool Solid;
	bool Homogonous;
	bool Water;
};
const float TableMass[2] = float[](20,40);
const float BoundaryFriction = 0.01;
const int MaxSteps = 2000;
const vec3 SunColour = vec3(1,0.9,0.9);
const int ChunkSize = 16;
const int ViewSize  = 5;
const ivec3 WorldSize = ivec3(ChunkSize*ViewSize,ChunkSize*ViewSize,ChunkSize); 
const int MaxLevels = 5;
const float FoV = 80;
const float mist = 0.01;
const float Aspect = 16.0/9.0;
const float NightBlue = 0.2;
const float SValCorrection = 1.08;
const int RenderBufferSizeX = 128;
const int RenderBufferSizeY = 128;
const int MaxEntityBlocks = 1000;
const int MaxEntityPerChunk = 100;
struct Chunk{
	int ChunkEntityCount;
	int EntityIds[MaxEntityPerChunk];
	//Node nodes[(ChunkSize * ChunkSize * ChunkSize * 2) + 1];
};
layout( location=0 ) uniform vec3 ChunkOffsets;       
//layout( location=1 ) uniform float SunTime;
layout (local_size_x = 32, local_size_y = 32) in;

//layout(std430, binding = 0) buffer render_buffer 
//{
//	vec3 RenderBuffer_Colour[RenderBufferSizeX * RenderBufferSizeY];
//};
layout (binding = 0, rgba32f) uniform image2D destTex;
uniform float CameraTilt;
uniform float CameraYaw;
uniform float SunTime;
uniform float RandomTimeSeed;
uniform int EntityCount;
vec3 SunDirection = normalize(vec3(sin(radians(SunTime)),cos(radians(SunTime * 0.5)),cos(radians(SunTime))));

layout(std430, binding = 0) buffer block_buffer 
{
	Block block_array[WorldSize.x * WorldSize.y * WorldSize.z];
};
layout(std430, binding = 1) buffer entity_buffer 
{
	EntityPrimitive entity_primitive_array[MaxEntityBlocks];
};
layout(std430, binding = 2) buffer chunk_buffer 
{
	Chunk chunk_array[ViewSize * ViewSize];
};
bool InBounds(vec3 pos){
	vec3 offsetpos = pos + ChunkOffsets;// - ChunkOffsets;
	return (offsetpos.x >= 0 && offsetpos.y >= 0 && offsetpos.z >= 0) && (offsetpos.x < WorldSize.x && offsetpos.y < WorldSize.y && offsetpos.z < WorldSize.z);
}
int GetChunkId(vec3 pos)
{
	ivec3 localpos = ivec3(floor((pos + ChunkOffsets) / ChunkSize));
	return localpos.y + (localpos.x * ViewSize); 
}
Block GetBlock(vec3 pos){
	ivec3 localpos = ivec3(floor(pos + ChunkOffsets));
	return block_array[localpos.z + (localpos.y * WorldSize.z) + (localpos.x * WorldSize.y * WorldSize.z)];	
}

float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}
int CheckEntity(vec3 pos)
{
	int chunkid = GetChunkId(pos);
	for(int i = 0; i < chunk_array[chunkid].ChunkEntityCount;++i){
		EntityPrimitive ent = entity_primitive_array[chunk_array[chunkid].EntityIds[i]];
		vec3 delta = ent.Position.xyz - (pos + ChunkOffsets);
		float dist2 = dot(delta,delta);
		if(dist2 < ent.Size.x * ent.Size.x)
		{
			return i;	
		}
	}
	return -1;
}
const float StepSize = 0.10;
float GetStepSize(vec3 pos,vec3 direction)
{
	Block block = GetBlock(pos);
	if(block.Entity == 1)
	{
		//Slowstep to find entity
		return StepSize;
	}
	else
	{
		//Use voxel acceleration
		vec3 DistancePlane = floor(pos + ChunkOffsets) - (pos + ChunkOffsets);
		DistancePlane.x = SunDirection.x > 0.0 ? (1.0 + DistancePlane.x) : DistancePlane.x;		
		DistancePlane.y = SunDirection.y > 0.0 ? (1.0 + DistancePlane.y) : DistancePlane.y;		
		DistancePlane.z = SunDirection.z > 0.0 ? (1.0 + DistancePlane.z) : DistancePlane.z;		
		if(abs(DistancePlane.x) == 0)
		{
			DistancePlane.x = 1 * sign(SunDirection.x);
		}
		if(abs(DistancePlane.y) == 0)
		{
			DistancePlane.y = 1 * sign(SunDirection.y);
		}
		if(abs(DistancePlane.z) == 0)
		{
			DistancePlane.z = 1 * sign(SunDirection.z);
		}
		vec3 SVals = abs(DistancePlane / SunDirection);
		float MinSVal = min(min(SVals.x,SVals.y),SVals.z);
		return MinSVal;
	}
}
vec3 SunLighting(vec3 pos){
	vec3 planedistance = (pos + ChunkOffsets) - round(pos + ChunkOffsets);
	vec3 Colour = SunColour;
	pos += SunDirection * StepSize;
	for(int i = 0;i < MaxSteps;++i){
		if(InBounds(pos))
		{
			float SS = GetStepSize(pos,SunDirection);
			Block block = GetBlock(pos + SunDirection * SS * 0.5);
			if(block.Solid == 1 || (block.Entity == 1 && CheckEntity(pos + SunDirection * SS * 0.5) != -1))
			{
				float ao = 0.08;
				return vec3(ao);
			}
		}
		else{
			return SunColour;
		}
	}
	return SunColour;
}
vec3 TraceSimple(vec3 pos,vec3 direction)
{
	vec3 Colour = vec3(1,1,1);
	vec3 Reflection = vec3(0,0,0);
	vec3 Mist = vec3(0,0,0);
	int steps = 0;
	float PrevWater = 0;
	float PrevStepSize = StepSize;
	float ReflectionMix = 0;
	vec3 startpos = pos;
	vec3 endpos = pos;
	vec3 midpoint = pos;

	for(;steps < MaxSteps;++steps){
		if(InBounds(pos))
		{
			Block midblock = GetBlock(pos);
			if(midblock.Solid == 1)
			{
				Colour *= midblock.Colour.xyz;// * SunLighting(pos);
				break;
			}
			else
			{
				if(midblock.Entity == 1 && CheckEntity(midpoint) != -1)
				{
					//int ent = CheckEntity(pos);
					Colour *= vec3(1,1,0);
					break;
				}
			}
			pos += direction * StepSize;
		}
		else{
			Colour *= SunColour * pow(dot((SunDirection),normalize(direction)),6) + vec3(0,0,1) * max(NightBlue,cos(radians(SunTime)));
			break;
		}
	}
	if (steps == MaxSteps)
	{
		Colour *= SunColour * pow(dot((SunDirection),normalize(direction)),6) + vec3(0,0,1) * max(NightBlue,cos(radians(SunTime)));
	}
	Colour = clamp(Colour,vec3(0,0,0),vec3(1,1,1));
	Reflection = clamp(Reflection,vec3(0,0,0),vec3(1,1,1));
	Mist = clamp(Mist,vec3(0,0,0),vec3(1,1,1));
	return clamp((Colour*(1-ReflectionMix))+Mist+Reflection,vec3(0,0,0),vec3(1,1,1));
}

mat4 rotationX( in float angle ) {
	return mat4(	1.0,		0,			0,			0,
			 		0, 	cos(angle),	-sin(angle),		0,
					0, 	sin(angle),	 cos(angle),		0,
					0, 			0,			  0, 		1);
}

mat4 rotationY( in float angle ) {
	return mat4(	cos(angle),		0,		sin(angle),	0,
			 				0,		1.0,			 0,	0,
					-sin(angle),	0,		cos(angle),	0,
							0, 		0,				0,	1);
}

mat4 rotationZ( in float angle ) {
	return mat4(	cos(angle),		-sin(angle),	0,	0,
			 		sin(angle),		cos(angle),		0,	0,
							0,				0,		1,	0,
							0,				0,		0,	1);
}


void main()
{
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
	float dx = (float(x) - float(RenderBufferSizeX/2.0)) / float(RenderBufferSizeX);
	float dy = (float(y) - float(RenderBufferSizeY/2.0)) / (float(RenderBufferSizeX) * Aspect);
	float DitherRndX = -0.5 + random(gl_GlobalInvocationID.xy * 52 + RandomTimeSeed);
	float DitherRndY = -0.5 + random(gl_GlobalInvocationID.xy * 52 + RandomTimeSeed * 3);
	vec3 OutColour = vec3(0);
	int sampleCount = 1;
	for(int i = 0; i < sampleCount;++i)
	{
		const float DitherAmount = 0.1;
		float yaw = (dx * FoV) + (DitherRndX * DitherAmount);
		float tilt = (dy * FoV) + (DitherRndY * DitherAmount);
		mat4x4 rotY = rotationY(radians(-CameraTilt + tilt));
		mat4x4 rotZ = rotationZ(radians(-CameraYaw + -yaw));
		vec3 RayDirection = (rotZ * rotY * vec4(1,0,0,1)).xyz;
		RayDirection = normalize(RayDirection);
		vec3 Colour = TraceSimple(vec3(0),RayDirection);
		OutColour += Colour;
	}
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	imageStore(destTex, storePos, vec4(OutColour/float(sampleCount),1.0));
}